<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.api.repository.ReportRepository">
	<select id="getTotalCustomerandContract" resultType="CustomerContractTotalOutput"  parameterType = "reportInput">
	    select  total_customer_register
	       ,current_customer_register
	       ,total_contract_register
	       ,current_contract_register
		from 
			(
			select sum(totalsum) as total_customer_register
			      ,sum(current_customer_register) as current_customer_register
			from (      
				select 1 as totalsum 
				       ,case when c.createdate = replace(#{calfromDate},'-','') then 1 else 0 end as current_customer_register 
				from customer c
				where c.providernumber = #{providernumber}
				) a
			)	a1
			,(
			select sum(total_contract_register) as total_contract_register
			      ,sum(current_contract_register) as current_contract_register
			from (      
				select case when c.effectenddatetime >= replace(#{calfromDate},'-','') then 1 else 0 end as total_contract_register
				      ,case when c.effectstartdatetime = replace(#{calfromDate},'-','') then 1 else 0 end as current_contract_register 
				from contract c
				where c.providernumber = #{providernumber}
				) a
			) a2
    </select>
    
    <select id="getRatioProduct" resultType="ProductRatioOutput" parameterType = "reportInput">
	select case when (t2.ranking <![CDATA[<]]> 6) then productname else '기타' end as productnm,
		   case when (t2.ranking <![CDATA[<]]> 6) then t2.cnt else sum(t2.cnt) end as productcnt,
		   case when (t2.ranking <![CDATA[<]]> 6) then truncate(t2.cnt/t2.totalCount*100,1) else truncate((sum(t2.cnt)/t2.totalCount*100),1) end as productratio,
		   t2.ranking
	from (
	 select prod.productname, prod.cnt, t1.totalCount, RANK() OVER(ORDER BY prod.cnt DESC) AS ranking
	 from 
	 (
	  select 'PRODUCT' as gubun
	      ,   p.productname  
	      ,   count(c.connumber) as cnt
	    from contract  c
	       , customer cu
	       , contractproduct cp
	       , product p
	    where cu.providernumber = #{providernumber}
	    and c.providernumber = cu.providernumber
	    and c.customernumber = cu.customernumber
	    and c.connumber = cp.connumber
	    and c.providernumber =  p.providernumber
	    and cp.productid = p.productid
	    and cp.producttype in ('NORMAL','COUPONCOUNT','COUPONPRICE')
	    and  date_format(now(), '%Y%m%d') between c.effectstartdatetime and c.effectenddatetime
	    group by 'PRODUCT', p.productname
	        union all
	    select  'PACKAGE' as gubun
	         ,   p.productname  
	         ,   count(c.connumber) as cnt
	    from contract  c
	       , customer cu
	       , contractproduct cp
	       , product p
	    where cu.providernumber = #{providernumber}
	    and c.providernumber = cu.providernumber
	    and c.customernumber = cu.customernumber
	    and c.connumber = cp.connumber
	    and cp.producttype = 'PACKAGE'
	    and cp.productid = p.productid
	    and p.producttype = 'PACKAGE'
	    and  date_format(now(), '%Y%m%d') between c.effectstartdatetime and c.effectenddatetime
	    group by 'PACKAGE', p.productname
	 )prod, (select count(c1.connumber) as totalCount 
	     from contract c1 
	     where date_format(now(), '%Y%m%d') between c1.effectstartdatetime and c1.effectenddatetime) t1
	 group by prod.productname
	 order by ranking
	) t2
	group by productnm
	order by ranking
    </select>
 
 <select id="getRatioProductRank" resultType="ProductRatioOutput" parameterType = "reportInput" >
	select case when (t2.ranking <![CDATA[<]]> 6) then productname else '기타' end as productnm,
   case when (t2.ranking <![CDATA[<]]> 6) then t2.cnt else sum(t2.cnt) end as productcnt
		from (
		 select prod.productname, prod.cnt, t1.totalCount, RANK() OVER(ORDER BY prod.cnt DESC) AS ranking
		 from 
		 (
		  select 'PRODUCT' as gubun
		      ,   p.productname  
		      ,   count(c.connumber) as cnt
		    from contract  c
		       , customer cu
		       , contractproduct cp
		       , product p
		    where cu.providernumber = #{providernumber}
		    and c.providernumber = cu.providernumber
		    and c.customernumber = cu.customernumber
		    and c.connumber = cp.connumber
		    and c.providernumber =  p.providernumber
		    and cp.productid = p.productid
		    and cp.producttype in ('NORMAL','COUPONCOUNT','COUPONPRICE')
		    and date_format(now(), '%Y%m%d') between c.effectstartdatetime and c.effectenddatetime
		    and c.effectstartdatetime like concat(#{calfromDate},'%')
		    group by 'PRODUCT', p.productname
		        union all
		    select  'PACKAGE' as gubun
		         ,   p.productname  
		         ,   count(c.connumber) as cnt
		    from contract  c
		       , customer cu
		       , contractproduct cp
		       , product p
		    where cu.providernumber = #{providernumber}
		    and c.providernumber = cu.providernumber
		    and c.customernumber = cu.customernumber
		    and c.connumber = cp.connumber
		    and cp.producttype = 'PACKAGE'
		    and cp.productid = p.productid
		    and p.producttype = 'PACKAGE'
		    and  date_format(now(), '%Y%m%d') between c.effectstartdatetime and c.effectenddatetime
		    and c.effectstartdatetime like concat(#{calfromDate},'%')
		    group by 'PACKAGE', p.productname
		 )prod, (select count(c1.connumber) as totalCount 
		     from contract c1 
		     where date_format(now(), '%Y%m%d') between c1.effectstartdatetime and c1.effectenddatetime) t1
		 group by prod.productname
		 order by ranking
		) t2
group by productnm
order by ranking
limit 5
    </select>

<select id="getInvoiceReportOutput" resultType="InvoiceReportOutput" parameterType = "reportInput" >
	select 
		 invYm
		,thismonthtotalInvoiceAmount
		,thismonthtotalCollectionBalanceAmount
		,todaytotalInvoiceAmount
		,todaytotalCollectionBalanceAmount
		,totalCollectionBalanceAmount
	from
		(
		select date_format(inv.invoicedate, "%Y%m") as invYm, sum(inv.invoiceamount) as thismonthtotalInvoiceAmount, sum(inv.collectionBalanceAmount) as thismonthtotalCollectionBalanceAmount 
		from invoice inv
		where inv.invoicedate between concat(date_format(now(), "%Y%m"), '01') and date_format(LAST_DAY (now()), "%Y%m%d") and providernumber = #{providernumber}
		) a1,
		(
		select inv.invoicedate, sum(inv.invoiceamount) as todaytotalInvoiceAmount, sum(inv.collectionBalanceAmount) as todaytotalCollectionBalanceAmount 
		from invoice inv
		where inv.invoicedate = date_format(now(), "%Y%m%d") and providernumber = #{providernumber}
		) a2,
		(
		select sum(inv.collectionBalanceAmount) as totalCollectionBalanceAmount 
		from invoice inv where providernumber = #{providernumber}
		) a3
    </select>    


<select id="getInvoiceReportMonthOutput" resultType="InvoiceMonthlyOutput" parameterType = "reportInput" >
	select date_format(inv.invoicedate, "%Y%m") as salemonthym
	     , sum(inv.invoiceamount) as salemonthamt
		from invoice inv
		where providernumber = #{providernumber}
		group by salemonthym
		order by 1
		limit 8
    </select>  
 
    
 <insert id="insertArticle"  useGeneratedKeys="true" keyProperty="articlenum" >
     insert into article 
     (articlesubject
	 ,articlecontent
	 ,writedate
	 ,viewyn
	 ,providernumber) values 
	 ( #{articlesubject}
	 , #{articlecontent}
	 , date_format(now(), '%Y-%m-%d')
	 ,'Y'
	 ,#{providernumber})
 </insert>
  <select id="getArticle"  resultType="ArticleOutput" >
    select a.articlenum
	       ,a.articlesubject
			 ,a.articlecontent
			 ,a.writedate 
	 from article a
      where viewyn='Y'
      and providernumber = #{providernumber}
      order by 1 desc
 </select>
 
 <update id="updateArticle"  useGeneratedKeys="true" keyProperty="articlenum" >
     update article
	set viewyn = 'N'
	where articlenum = #{articlenum}
 </update>

<select id="getMonthOrderReport" resultType="OrderReport" parameterType = "OrderReport" >
select subscribedatetime, recurringdeliveryyn, 
       channelid, (select codename from codegroupdetail z where z.codegroupid = 'CHANNEL' and z.code = a.channelid) as channelname,
	   customertype, quantity
from  (select subscribedatetime, recurringdeliveryyn, channelid, customertype, sum(quantity) as quantity
       from  (select substr(a.subscribedatetime,1,6) as subscribedatetime, a.recurringdeliveryyn, a.channelid, if(a.customertype='', a.channelkind,a.customertype) as customertype, count(*) as quantity
              from   contract a
              where  a.providernumber = #{providernumber}
              and    a.subscribedatetime like concat(#{subscribedatetime},'%')
<if test='!"".equals(recurringdeliveryyn)'>
              and    a.recurringdeliveryyn = #{recurringdeliveryyn}
</if>              
              group by substr(a.subscribedatetime,1,6), a.recurringdeliveryyn, a.channelid, a.customertype, if(a.customertype='', a.channelkind,a.customertype)) a
       group by subscribedatetime, recurringdeliveryyn, channelid, customertype with rollup) a
where  customertype is not null
or     recurringdeliveryyn is null 
or     subscribedatetime is null       
order by if(subscribedatetime is null,1,0), subscribedatetime, recurringdeliveryyn desc, channelname, customertype
</select> 

<select id="getMonthDeliveryReport" resultType="OrderReport" parameterType = "OrderReport" >
select subscribedatetime, recurringdeliveryyn, 
       channelid, (select codename from codegroupdetail z where z.codegroupid = 'CHANNEL' and z.code = a.channelid) as channelname, 
		 customertype, quantity
from  (select subscribedatetime, recurringdeliveryyn, channelid, customertype, sum(quantity) as quantity
       from  (select substr(a.deliverydate,1,6) as subscribedatetime, b.recurringdeliveryyn, b.channelid, 
                     if(b.customertype='',b.channelkind,b.customertype) as customertype, sum(quantity) as quantity
              from   deliverydetail a, contract b, contractproduct c
              where  a.providernumber = #{providernumber}
              and    a.deliverydate like concat(#{subscribedatetime},'%')
              and    a.deliverystate != 'CANCEL'
              and    a.connumber = b.connumber
<if test='!"".equals(recurringdeliveryyn)'>
              and    b.recurringdeliveryyn = #{recurringdeliveryyn}
</if>              
              and    a.connumber = c.connumber
              group by substr(a.deliverydate,1,6), b.recurringdeliveryyn, b.channelid, if(b.customertype='',b.channelkind,b.customertype)) a
       group by subscribedatetime, recurringdeliveryyn, channelid, customertype with rollup) a
where  customertype is not null
or     recurringdeliveryyn is null 
or     subscribedatetime is null       
order by if(subscribedatetime is null,1,0), subscribedatetime, recurringdeliveryyn desc, channelname, customertype
</select> 

<select id="getDayOrderReport" resultType="OrderReport" parameterType = "OrderReport" >
select subscribedatetime, recurringdeliveryyn, 
       channelid, (select codename from codegroupdetail z where z.codegroupid = 'CHANNEL' and z.code = a.channelid) as channelname,
	   customertype, quantity
from  (select subscribedatetime, recurringdeliveryyn, channelid, customertype, sum(quantity) as quantity
       from  (select substr(a.subscribedatetime,1,8) as subscribedatetime, a.recurringdeliveryyn, a.channelid, if(a.customertype='', a.channelkind,a.customertype) as customertype, count(*) as quantity
              from   contract a
              where  a.providernumber = #{providernumber}
              and    a.subscribedatetime like concat(#{subscribedatetime},'%')
<if test='!"".equals(recurringdeliveryyn)'>
              and    a.recurringdeliveryyn = #{recurringdeliveryyn}
</if>              
              group by substr(a.subscribedatetime,1,8), a.recurringdeliveryyn, a.channelid, a.customertype, if(a.customertype='', a.channelkind,a.customertype)) a
       group by subscribedatetime, recurringdeliveryyn, channelid, customertype with rollup) a
where  customertype is not null
or     recurringdeliveryyn is null 
or     subscribedatetime is null       
order by if(subscribedatetime is null,1,0), subscribedatetime, recurringdeliveryyn desc, channelname, customertype
</select> 

<select id="getDayDeliveryReport" resultType="OrderReport" parameterType = "OrderReport" >
select subscribedatetime, recurringdeliveryyn, 
       channelid, (select codename from codegroupdetail z where z.codegroupid = 'CHANNEL' and z.code = a.channelid) as channelname, 
		 customertype, quantity
from  (select subscribedatetime, recurringdeliveryyn, channelid, customertype, sum(quantity) as quantity
       from  (select substr(a.deliverydate,1,8) as subscribedatetime, b.recurringdeliveryyn, b.channelid, 
                     if(b.customertype='',b.channelkind,b.customertype) as customertype, sum(quantity) as quantity
              from   deliverydetail a, contract b, contractproduct c
              where  a.providernumber = #{providernumber}
              and    a.deliverydate like concat(#{subscribedatetime},'%')
              and    a.deliverystate != 'CANCEL'
              and    a.connumber = b.connumber
<if test='!"".equals(recurringdeliveryyn)'>
              and    b.recurringdeliveryyn = #{recurringdeliveryyn}
</if>              
              and    a.connumber = c.connumber
              group by substr(a.deliverydate,1,8), b.recurringdeliveryyn, b.channelid, if(b.customertype='',b.channelkind,b.customertype)) a
       group by subscribedatetime, recurringdeliveryyn, channelid, customertype with rollup) a
where  customertype is not null
or     recurringdeliveryyn is null 
or     subscribedatetime is null       
order by if(subscribedatetime is null,1,0), subscribedatetime, recurringdeliveryyn desc, channelname, customertype
</select> 
 
<select id="getYearProductOrderReport" resultType="OrderReport" parameterType = "OrderReport" >
select a.productid, productname, 
       a.channelid, (select codename from codegroupdetail z where z.codegroupid = 'CHANNEL' and z.code = a.channelid) as channelname,
       a.contractcount, a.quantity, a.deliverycount
from  (select a.productid, a.productname, a.channelid, sum(a.contractcount) as contractcount, sum(a.quantity) as quantity, sum(a.deliverycount) as deliverycount
       from  (select if(a.channelid='BILLINGOSS'||a.channelid='BILLLETTER',b.productid,' ') as productid, b.productname, a.channelid, count(*) as contractcount, sum(b.quantity) as quantity,
                     sum((select count(*) from deliverydetail c where c.connumber = a.connumber)*b.quantity) as deliverycount
              from   contract a, contractproduct b 
              where  a.providernumber = #{providernumber}
              and    a.subscribedatetime like concat(#{subscribedatetime},'%')
              and    a.connumber = b.connumber
<if test='!"".equals(channelid)'>
              and    a.channelid = #{channelid}
</if>              
              group by if(a.channelid='BILLINGOSS'||a.channelid='BILLLETTER',b.productid,' '), b.productname, a.channelid) a
       group by a.productid, a.productname, a.channelid with rollup) a
where  a.channelid is not null 
or     a.productid is null
order by if(a.productname is null,1,0), a.productname, channelname
</select> 
 
<select id="getMonthProductOrderReport" resultType="OrderReport" parameterType = "OrderReport" >
select a.subscribedatetime, a.productid, productname, 
       a.channelid, (select codename from codegroupdetail z where z.codegroupid = 'CHANNEL' and z.code = a.channelid) as channelname,
       a.contractcount, a.quantity, a.deliverycount
from  (select a.subscribedatetime, a.productid, a.productname, a.channelid, sum(a.contractcount) as contractcount, sum(a.quantity) as quantity, sum(a.deliverycount) as deliverycount
       from  (select substr(a.subscribedatetime,1,6) as subscribedatetime, if(a.channelid='BILLINGOSS'||a.channelid='BILLLETTER',b.productid,' ') as productid, b.productname, a.channelid, 
		               count(*) as contractcount, sum(b.quantity) as quantity,
                     sum((select count(*) from deliverydetail c where c.connumber = a.connumber)*b.quantity) as deliverycount
              from   contract a, contractproduct b 
              where  a.providernumber = #{providernumber}
              and    a.subscribedatetime like concat(#{subscribedatetime},'%')
              and    a.connumber = b.connumber
<if test='!"".equals(channelid)'>
              and    a.channelid = #{channelid}
</if>              
              group by substr(a.subscribedatetime,1,6), if(a.channelid='BILLINGOSS'||a.channelid='BILLLETTER',b.productid,' '), b.productname, a.channelid) a
       group by a.subscribedatetime, a.productid, a.productname, a.channelid with rollup) a
where a.channelid is not null 
or    a.productid is null
or    a.subscribedatetime is null
order by if(subscribedatetime is null,1,0), subscribedatetime, if(productid is null,1,0), productname, channelname
</select>

<select id="getYearProductDeliveryReport" resultType="OrderReport" parameterType = "OrderReport" >
select productid, productname, 
       channelid, (select codename from codegroupdetail z where z.codegroupid = 'CHANNEL' and z.code = a.channelid) as channelname, 
       quantity
from  (select productid, productname, channelid, sum(quantity) as quantity
       from  (select if(b.channelid='BILLINGOSS'||a.channelid='BILLLETTER',c.productid,' ') as productid, c.productname, b.channelid, sum(c.quantity) as quantity
              from   deliverydetail a, contract b, contractproduct c
              where  a.providernumber =#{providernumber}
              and    a.deliverydate like concat(#{subscribedatetime},'%')
              and    a.deliverystate != 'CANCEL'
              and    a.connumber = b.connumber
<if test='!"".equals(channelid)'>
              and    b.channelid = #{channelid}
</if>              
              and    b.connumber = c.connumber
              group by if(b.channelid='BILLINGOSS'||a.channelid='BILLLETTER',c.productid,' '), c.productname, b.channelid) a
       group by productid, productname, channelid with rollup) a
where  channelid is not null
or     productid is null
order by if(productid is null,1,0), productname, channelname
</select>

<select id="getMonthProductDeliveryReport" resultType="OrderReport" parameterType = "OrderReport" >
select subscribedatetime, productid, productname, 
       channelid, (select codename from codegroupdetail z where z.codegroupid = 'CHANNEL' and z.code = a.channelid) as channelname, 
       quantity
from  (select subscribedatetime, productid, productname, channelid, sum(quantity) as quantity
       from  (select substr(a.deliverydate,1,6) as subscribedatetime, if(b.channelid='BILLINGOSS'||a.channelid='BILLLETTER',c.productid,' ') as productid, c.productname, b.channelid, sum(c.quantity) as quantity
              from   deliverydetail a, contract b, contractproduct c
              where  a.providernumber =#{providernumber}
              and    a.deliverydate like concat(#{subscribedatetime},'%')
              and    a.deliverystate != 'CANCEL'
              and    a.connumber = b.connumber
<if test='!"".equals(channelid)'>
              and    b.channelid = #{channelid}
</if>              
              and    b.connumber = c.connumber
              group by substr(a.deliverydate,1,6), if(b.channelid='BILLINGOSS'||a.channelid='BILLLETTER',c.productid,' '), c.productname, b.channelid) a
       group by subscribedatetime, productid, productname, channelid with rollup) a
where  channelid is not null
or     productid is null
or     subscribedatetime is null
order by if(subscribedatetime is null,1,0), subscribedatetime, if(productid is null,1,0), productname, channelname
</select>

<select id="getCounselList" resultType="OrderReport" parameterType = "OrderReport" >
select concat(a.counsellingdate,a.counsellingtime) as counsellingdate, a.memo, a.answer, 
       a.category, (select codename from codegroupdetail z where z.codegroupid = 'CATEGORY' and z.code = a.category) as categoryname,
       a.inboundpath, (select codename from codegroupdetail z where z.codegroupid = 'INBOUNDPATH' and z.code = a.inboundpath) as inboundpathname, 
       a.state, (select codename from codegroupdetail z where z.codegroupid = 'COUNSELSTATE' and z.code = a.state) as statename,
       b.customername, b.phonenumber, b.cellphonenumber,
       sum(1) over() as totalcount
from   counsellinghistory a, customer b
where  a.counsellingdate like concat(#{counsellingdate},'%')
<if test='!"".equals(state)'>
and    a.state = #{state}
</if>
and    a.customernumber = b.customernumber
and    b.providernumber = #{providernumber}
order by a.counsellingdate desc, a.counsellingtime desc
limit #{pageStart}, #{perPageNum}
</select> 

<select id="getCounselReport" resultType="OrderReport" parameterType = "OrderReport" >
select counsellingdate, 
       a.category, (select codename from codegroupdetail z where z.codegroupid = 'CATEGORY' and z.code = a.category) as categoryname,
       a.inboundpath, (select codename from codegroupdetail z where z.codegroupid = 'INBOUNDPATH' and z.code = a.inboundpath) as inboundpathname, 
       counselcount
from  (select substr(a.counsellingdate,1,6) as counsellingdate, a.category, a.inboundpath, count(*) as counselcount
       from   counsellinghistory a, customer b
       where  a.counsellingdate like concat(#{counsellingdate},'%')
<if test='!"".equals(category)'>
       and    a.category = #{category}
</if>       
<if test='!"".equals(inboundpath)'>
       and    a.inboundpath = #{inboundpath}
</if>       
       and    a.customernumber = b.customernumber
       and    b.providernumber = #{providernumber}
       group by substr(a.counsellingdate,1,6), a.category, a.inboundpath with rollup) a
where  inboundpath is not null
or     counsellingdate is null
order by if(counsellingdate is null,1,0), counsellingdate, categoryname, inboundpathname
</select> 
</mapper>
