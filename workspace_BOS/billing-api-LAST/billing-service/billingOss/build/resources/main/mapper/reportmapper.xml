<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.api.repository.ReportRepository">

<resultMap id="deliveryList" type="com.api.model.report.Report"> 
	<result property="conNumber" column="connumber"/> 
	<result property="deliveryDate" column="deliverydate"/> 
	<result property="deliveryState" column="deliverystate"/> 
	<result property="customerName" column="customername"/>
	<result property="productName" column="productname"/>
	<result property="sequence" column="sequence"/>
</resultMap>
<select id="getDeliveryList" resultMap="deliveryList"  parameterType = "Report">
<![CDATA[
select a.connumber, a.deliverydate, if(deliverystate < 0, concat('배송대기(',deliverystate,')'), if(deliverystate = 0, '배송대기(오늘)', concat('미배송(+',deliverystate,')'))) as deliverystate,
       b.customername, c.productname,
       concat((select count(*) from deliverydetail z where z.connumber = a.connumber and z.deliverydate <= a.deliverydate and z.deliverynumber <= a.deliverynumber and z.deliverystate != 'CANCEL'),
               '/',
              (select count(*) from deliverydetail z where z.connumber = a.connumber and z.deliverystate != 'CANCEL')) as sequence
from  (select a.connumber, a.deliverynumber, a.deliverydate, datediff(curdate(), str_to_date(a.deliverydate,'%Y%m%d')) as deliverystate, a.customernumber
       from   deliverydetail a, contract b
       where  a.providernumber = #{providerNumber}
       and    a.deliverystate = 'BEFORE'
       and    a.connumber = b.connumber
       and    b.contractstate = 'ACTIVATION'
       order by a.providernumber, a.deliverystate, a.deliverydate
       limit 5) a, customer b, contractproduct c
where  a.customernumber = b.customernumber
and    a.connumber = c.connumber
order by a.deliverydate, b.customername
]]>
</select>

<resultMap id="contractCount" type="com.api.model.report.Report"> 
	<result property="customerCount" column="customercount"/> 
	<result property="contractCount" column="contractcount"/> 
	<result property="newContractCount" column="newcontractcount"/>
	<result property="unsettledContractCount" column="unsettledcontractcount"/>
</resultMap>
<select id="getContractCount" resultMap="contractCount"  parameterType = "Report">
select customercount, contractcount, newcontractcount, unsettledcontractcount
from  (select count(*) as customercount, nvl(sum(contractcount),0) as contractcount
       from  (select a.customernumber, count(*) as contractcount
              from   contract a
              where  a.providernumber = #{providerNumber}
              and    a.contractstate != 'UNSETTLED'
              group by a.customernumber) a) a,
      (select nvl(count(*),0) as newcontractcount
       from   contract a
       where  a.providernumber = #{providerNumber}
       and    a.registrationdatetime like concat(date_format(curdate(),'%Y%m%d'),'%')
       and    a.contractstate = 'ACTIVATION') b,
      (select count(*) as unsettledcontractcount
       from  (select b.invoicenumber, 
                    (select substr(max(concat(c.paymentdatetime, c.paymenttypecode)),15) from paymenthistory c 
		             where c.providernumber = b.providernumber and c.invoicenumber = b.invoicenumber and c.connumber = b.connumber) as paymentinfo
              from   contract a, invoice b
              where  a.providernumber = #{providerNumber}
              and    a.contractstate = 'ACTIVATION'
              and    a.connumber = b.connumber
              and    b.invoicedate between date_format(adddate(adddate(curdate(), interval -1 month), interval 1 day),'%Y%m%d') and date_format(curdate(),'%Y%m%d')
              and    b.collectioncloseyn = 'N') a
       where  a.paymentinfo is null
       or     a.paymentinfo != 'REFUND') c
</select>

<resultMap id="productList" type="com.api.model.report.Report"> 
	<result property="productName" column="productname"/> 
	<result property="contractCount" column="contractcount"/> 
</resultMap>
<select id="getProductList" resultMap="productList" parameterType="Report">
select b.productname, sum(b.quantity) as contractcount
from   contract a, contractproduct b
where  a.providernumber = #{providerNumber}
and    a.registrationdatetime between concat(date_format(date_add(curdate(), interval -30 day),'%Y%m%d'),'000000') and concat(date_format(curdate(), '%Y%m%d'),'235959')
and    a.contractstate != 'UNSETTLED'
and    a.connumber = b.connumber
group by b.productid, b.productname
order by sum(b.quantity) desc
limit 5
</select>

<resultMap id="weekContractCount" type="com.api.model.report.Report"> 
	<result property="week" column="week"/> 
	<result property="contractCount" column="contractcount"/> 
</resultMap>
<select id="getWeekContractCount" resultMap="weekContractCount"  parameterType = "Report">
select a.week, nvl(round(b.contractcount),0) as contractcount
from  (select rownum, 
              case rownum when 0 then '월'
	                      when 1 then '화'
	                      when 2 then '수'
	                      when 3 then '목'
       		              when 4 then '금'
      		              when 5 then '토'
                          when 6 then '일'
                          when 7 then '월' end as week
       from  (select @rownum := @rownum +1 as rownum
              from   codegroup a, (select @rownum := -1) b
              limit  7) a) a left outer join 
		     (select weekday(registrationdatetime) as registrationdatetime, sum(contractcount)/count(*) as contractcount
              from  (select str_to_date(substr(a.registrationdatetime,1,8),'%Y%m%d') as registrationdatetime, count(*) as contractcount
                     from   contract a
                     where  a.providernumber = #{providerNumber}
                     and    a.contractstate != 'UNSETTLED'
                     group by str_to_date(substr(a.registrationdatetime,1,8),'%Y%m%d')) a
              group by weekday(registrationdatetime)) b on (a.rownum = b.registrationdatetime)
</select>

<resultMap id="monthlyAmount" type="com.api.model.report.Report"> 
	<result property="invoiceDate" column="invoicedate"/> 
	<result property="invoiceAmount" column="invoiceamount"/> 
</resultMap>
<select id="getMonthlyAmount" resultMap="monthlyAmount"  parameterType = "Report">
select a.invoicedate, nvl(invoiceamount,0) as invoiceamount
from  (select substr(date_format(adddate(curdate(),interval -rownum month),'%Y%m%d'),1,6) as invoicedate
       from  (select @rownum := @rownum +1 as rownum
              from   codegroup a, (select @rownum := -1) b
              limit  6) a) a left outer join 
       (select substr(a.invoicedate,1,6) as invoicedate, nvl(sum(totalinvoiceamount),0) as invoiceamount
        from   invoice a
        where  a.providernumber = #{providerNumber}
        and    a.invoicedate between concat(substr(date_format(adddate(curdate(), interval -5 month),'%Y%m%d'),1,6),'01') and date_format(curdate(),'%Y%m%d')
        and    a.collectioncloseyn = 'Y'
        group by substr(a.invoicedate,1,6)) b on (a.invoicedate = b.invoicedate)
order by if(a.invoicedate=date_format(curdate(),'%Y%m'),0,1), a.invoicedate
</select>

<resultMap id="monthlyAmountList" type="com.api.model.report.Report"> 
	<result property="invoiceDate" column="invoicedate"/> 
	<result property="invoiceAmount" column="invoiceamount"/> 
	<result property="contractCount" column="contractcount"/> 
</resultMap>
<select id="getMonthlyAmountList" resultMap="monthlyAmountList"  parameterType = "Report">
select a.invoicedate, nvl(b.invoiceamount,0) as invoiceamount, nvl(b.contractcount,0) as contractcount
from  (select substr(date_format(adddate(curdate(),interval -rownum month),'%Y%m%d'),1,6) as invoicedate
       from  (select @rownum := @rownum +1 as rownum
              from   codegroup a, (select @rownum := -1) b
              limit  12)a ) a left outer join 
      (select substr(a.invoicedate,1,6) as invoicedate, nvl(sum(totalinvoiceamount),0) as invoiceamount, count(*) as contractcount
       from   invoice a
       where  a.providernumber = #{providerNumber}
       and    a.invoicedate between concat(substr(date_format(adddate(curdate(), interval -6 month),'%Y%m%d'),1,6),'01') and date_format(curdate(),'%Y%m%d')
       and    a.collectioncloseyn = 'Y'
       group by substr(a.invoicedate,1,6)) b on (a.invoicedate = b.invoicedate)
order by a.invoicedate
</select>

<!-- 보고서 전월대비 증감 비율 조회 -->
<select id="getMonthlyRate" resultType="HashMap" parameterType = "Report">

	SELECT
		monthlyRate. divRate
		, monthlyRate.preValue
		, monthlyRate.currentLabel AS currentValue
		, ROUND(CASE WHEN monthlyRate.preValue <![CDATA[<]]> monthlyRate.currentValue 
								THEN (monthlyRate.currentValue-monthlyRate.preValue)/REPLACE(monthlyRate.preValue,0,1) * 100
				       ELSE (monthlyRate.preValue-monthlyRate.currentValue)/REPLACE(monthlyRate.currentValue,0,1) * 100* -1 END, 1) AS rateValue
		/*, ROUND(monthlyRate.rateValue,1) AS rateValue*/
	  FROM(
			/* 전월대비 결제금액*/
			<bind name="paymentTypeCode" value="'PAYMENT'" />			
			<include refid="sqlLastMonthContrastByPaymentType"></include>
			UNION ALL			
			/* 전월대비 환불금액*/
			<bind name="paymentTypeCode" value="'REFUND'" />			
			<include refid="sqlLastMonthContrastByPaymentType"></include>
			UNION ALL
			/* 최고판매채널*/
			SELECT 
				'BEST' AS divRate
				, codename AS currentLabel
				, (CASE divDate WHEN 'BEFORE' THEN currentValue
						ELSE preValue END) preValue
				, (CASE divDate WHEN 'BEFORE' THEN 0
						ELSE currentValue END) AS currentValue				
			  FROM (
					SELECT
						(CASE paymentDate WHEN SUBSTR(#{searchDate}  ,1,6) THEN 'NOW'
							ELSE 'BEFORE' END) AS divDate
						, NVL(LEAD(paymentAmount, -1) OVER (ORDER BY paymentDate), 0) AS preValue
						, paymentAmount AS currentValue
						, codename
						FROM
						(
							SELECT 
								channelRankList.channelid
								, codeD.codename
								, channelRankList.paymentDate
								, channelRankList.paymentAmount	
								FROM (
									(
									<bind name="beforeYn" value="'N'" />
									<include refid="sqlBestChannelPayment"></include>
									)
									UNION ALL
									(
									<bind name="beforeYn" value="'Y'" />
									<include refid="sqlBestChannelPayment"></include>
									)
								) AS channelRankList
								, codegroupdetail codeD
							 WHERE channelRankList.channelid = codeD.code
							   AND codeD.codegroupid = 'CHANNEL'
						) AS channelRank
					 ORDER BY paymentDate DESC
					 LIMIT 1
			  ) bestChannel			
			UNION ALL
			/* 전월대비계약건수*/
			SELECT 
				'CONTRACT' AS divRate
				, (CASE divDate WHEN 'BEFORE' THEN 0
						ELSE monthContract.currentValue END) AS currentLabel
				, (CASE divDate WHEN 'BEFORE' THEN currentValue
						ELSE preValue END) preValue
				, (CASE divDate WHEN 'BEFORE' THEN 0
						ELSE currentValue END) AS currentValue				
			  FROM (
					SELECT
						 (CASE contRegistMonth WHEN SUBSTR(#{searchDate},1,6) THEN 'NOW'
							ELSE 'BEFORE' END) AS divDate
						, NVL(LEAD(contractCount, -1) OVER (ORDER BY contRegistMonth), 0) AS preValue
						, contractCount AS currentValue
						FROM
						(
								SELECT
									SUBSTR(cont.registrationdatetime,1,6) AS contRegistMonth
									, COUNT(*) AS contractCount
								  FROM contract cont
								 WHERE cont.contractstate != 'UNSETTLED'
								   AND SUBSTR(cont.registrationdatetime,1,6)  BETWEEN DATE_FORMAT(DATE_SUB(DATE(#{searchDate}), INTERVAL 1 month), '%Y%m') 
															 																AND DATE_FORMAT(DATE(#{searchDate}), '%Y%m')
							 	<if test='providerNumber != null and !"0".equals(providerNumber )'>		 	
									AND cont.providernumber = #{providerNumber }
								</if>									
								 GROUP BY SUBSTR(cont.registrationdatetime,1,6)  			
						) AS contractMonthList
					 ORDER BY contRegistMonth DESC
					 LIMIT 1
			  ) monthContract
	  )monthlyRate
	  
</select>

<!-- 수납 유형별 지난달 비교 -->
<sql id="sqlLastMonthContrastByPaymentType">
			SELECT 
				<if test="paymentTypeCode == 'PAYMENT'">
					'PAYMENT' AS divRate
				</if>
				<if test="paymentTypeCode == 'REFUND'">
					'REFUND' AS divRate
				</if>
				<if test="paymentTypeCode == ''">
					'PAYMENT' AS divRate
				</if>
				, (CASE divDate WHEN 'BEFORE' THEN 0
						ELSE monthSum.currentValue END) AS currentLabel
				, (CASE divDate WHEN 'BEFORE' THEN monthSum.currentValue
						ELSE monthSum.preValue END) preValue
				, (CASE divDate WHEN 'BEFORE' THEN 0
						ELSE monthSum.currentValue END) AS currentValue 
			  FROM (
					SELECT
						(CASE paymentDate WHEN SUBSTR(#{searchDate}  ,1,6) THEN 'NOW'
							ELSE 'BEFORE' END) AS divDate
						, NVL(LEAD(monthSumList.paymentAmount, -1) OVER (ORDER BY monthSumList.paymentDate), 0) AS preValue
						, monthSumList.paymentAmount AS currentValue
					  FROM(
							SELECT
								SUBSTR(invoList.paymentdatetime,1,6) AS paymentDate
								, SUM(invoList.paymentamount) AS paymentAmount
							  FROM (
											<include refid="sqlInvoiceList"></include>			
							  )invoList
							WHERE 1=1
							<if test='providerNumber != null and !"0".equals(providerNumber )'>
							  AND invoList.providernumber = #{providerNumber}			
							</if>
							<if test="paymentTypeCode == 'PAYMENT'">
							  AND invoList.paymenttypecode = 'PAYMENT'
							</if>			  
							<if test="paymentTypeCode == 'REFUND'">
							  AND invoList.paymenttypecode = 'REFUND'
							</if>			  
							<if test="paymentTypeCode == ''">
							  AND invoList.paymenttypecode = 'PAYMENT'
							</if>			  
							GROUP BY SUBSTR(invoList.paymentdatetime,1,6)
					  ) monthSumList
					WHERE monthSumList.paymentDate BETWEEN DATE_FORMAT(DATE_SUB(DATE(#{searchDate}), INTERVAL 1 month), '%Y%m') 
							 											AND DATE_FORMAT(DATE(#{searchDate}), '%Y%m')
					ORDER BY paymentDate DESC
					LIMIT 1
			  )monthSum
</sql>

<!-- 보고서 지역별 결제 금액 조회 -->
<select id="getMonthlyAreaAmountList" resultType="HashMap" parameterType = "Report">
	SELECT
		areaRate.areaName	AS keyValue
		, SUM(areaRate.paymentAmount) AS payAmount
	  FROM(
		SELECT
			 SUBSTR(addr.zipcode,1,2) as areaCode
			 , CASE WHEN SUBSTR(addr.zipcode,1,2) BETWEEN '01' AND '09' THEN '서울'
			 			WHEN SUBSTR(addr.zipcode,1,2) BETWEEN '10' AND '20' THEN '경기'
			 			WHEN SUBSTR(addr.zipcode,1,2) BETWEEN '21' AND '23' THEN '인천'
			 			WHEN SUBSTR(addr.zipcode,1,2) BETWEEN '24' AND '26' THEN '강원'
			 			WHEN SUBSTR(addr.zipcode,1,2) BETWEEN '27' AND '29' THEN '충북'
			 			WHEN SUBSTR(addr.zipcode,1,2) = '30' THEN '세종'
			 			WHEN SUBSTR(addr.zipcode,1,2) BETWEEN '31' AND '33' THEN '충남'
			 			WHEN SUBSTR(addr.zipcode,1,2) BETWEEN '34' AND '35' THEN '대전'
			 			WHEN SUBSTR(addr.zipcode,1,2) BETWEEN '36' AND '40' THEN '경북'
			 			WHEN SUBSTR(addr.zipcode,1,2) BETWEEN '41' AND '43' THEN '대구'
			 			WHEN SUBSTR(addr.zipcode,1,2) BETWEEN '44' AND '45' THEN '울산'
			 			WHEN SUBSTR(addr.zipcode,1,2) BETWEEN '46' AND '49' THEN '부산'
			 			WHEN SUBSTR(addr.zipcode,1,2) BETWEEN '50' AND '53' THEN '경남'
			 			WHEN SUBSTR(addr.zipcode,1,2) BETWEEN '54' AND '56' THEN '전북'
			 			WHEN SUBSTR(addr.zipcode,1,2) BETWEEN '57' AND '60' THEN '전남'
			 			WHEN SUBSTR(addr.zipcode,1,2) BETWEEN '61' AND '62' THEN '광주'
			 			WHEN SUBSTR(addr.zipcode,1,2) = '63' THEN '제주'
			 			ELSE '기타'END AS areaName
			 , SUM(invoList.paymentamount) AS paymentAmount
		  FROM (
		  			<include refid="sqlInvoiceList"></include>
		  		) invoList
				, contract cont   LEFT OUTER JOIN address AS addr																						
													ON (cont.deliveryaddressid = addr.addressid)
		 WHERE invoList.connumber = cont.connumber
		 	AND invoList.providernumber = cont.providernumber
		 	AND SUBSTR(invoList.paymentdatetime,1,6) =  DATE_FORMAT(DATE(#{searchDate}), '%Y%m')
		 	<if test='providerNumber != null and !"0".equals(providerNumber )'>		 	
				AND invoList.providernumber = #{providerNumber }
			</if>
		   AND invoList.paymenttypecode = 'PAYMENT'
		   AND cont.contractstate != 'UNSETTLED'
		GROUP BY SUBSTR(addr.zipcode,1,2) 
	) areaRate
	GROUP BY areaRate.areaName
</select>

<!-- 보고서 결제추이 조회 -->
<select id="getMonthlyPaymentTrend" resultType="HashMap" parameterType = "Report">	
	SELECT
		monList.listDate AS paymentDate
		, IFNULL(payList.paymentAmount, 0) AS paymentAmount
	  FROM (
			SELECT
					DATE_FORMAT(ADDDATE(CURDATE(),interval -rownum month),'%Y.%m') AS listDate
			  FROM(SELECT @rownum := @rownum +1 as rownum
			         FROM codegroup a , (select @rownum := -1) b
			        LIMIT 10) subMonList 
	  )monList LEFT OUTER JOIN (
			SELECT
				DATE_FORMAT(invoList.paymentdatetime,'%Y.%m') AS paymentDate
				, SUM(invoList.paymentamount) AS paymentAmount
			  FROM(
				  			<include refid="sqlInvoiceList"></include>
				  		) invoList
					, contract cont
			 WHERE invoList.connumber = cont.connumber
			 	AND invoList.providernumber = cont.providernumber
				AND SUBSTR(invoList.paymentdatetime,1,6) BETWEEN DATE_FORMAT(DATE_SUB(DATE(#{searchDate}), INTERVAL 10 month), '%Y%m') 
			 							AND DATE_FORMAT(DATE(#{searchDate}), '%Y%m')
			 	<if test='providerNumber != null and !"0".equals(providerNumber )'>		 	
					AND invoList.providernumber = #{providerNumber }
				</if>	   
			   AND invoList.paymenttypecode = #{searchPaymentTypeCode}
			GROUP BY SUBSTR(invoList.paymentdatetime,1,6)
			ORDER BY 1
	  ) payList ON (monList.listDate = payList.paymentDate)
	  ORDER BY 1	
</select>

<!-- 보고서 요일별 매출현황 조회 -->
<select id="getMonthlyPaymentWeek" resultType="HashMap" parameterType = "Report">
	SELECT
			weekList.weekDiv
			, weekList.weekName
			, IFNULL(paymentList.paymentAmount,0) AS paymentAmount
		FROM (SELECT 0 AS weekDiv, '월' AS weekName
				UNION ALL SELECT 1 AS weekDiv, '화' AS weekName
				UNION ALL SELECT 2 AS weekDiv, '수' AS weekName
				UNION ALL SELECT 3 AS weekDiv, '목' AS weekName
				UNION ALL SELECT 4 AS weekDiv, '금' AS weekName
				UNION ALL SELECT 5 AS weekDiv, '토' AS weekName
				UNION ALL SELECT 6 AS weekDiv, '일' AS weekName) AS weekList 
				LEFT OUTER JOIN  (
										SELECT
											SUBSTR(invoList.paymentdatetime,1,6) AS paymentDate
											, SUM(invoList.paymentamount) AS paymentAmount
											, WEEKDAY(invoList.paymentdatetime) as weekDayDiv
										  FROM (
										  			<include refid="sqlInvoiceList"></include>
										  		) invoList
												, contract cont
										 WHERE invoList.connumber = cont.connumber
										 	AND invoList.providernumber = cont.providernumber
											AND SUBSTR(invoList.paymentdatetime,1,6) = DATE_FORMAT(DATE(#{searchDate}), '%Y%m')
										<if test='providerNumber != null and !"0".equals(providerNumber )'>		 	
											AND invoList.providernumber = #{providerNumber }
										</if>
										   AND invoList.paymenttypecode = #{searchPaymentTypeCode}
										GROUP BY WEEKDAY(invoList.paymentdatetime)
									) paymentList
							ON (weekList.weekDiv = paymentList.weekDayDiv)
				
	ORDER BY weekList.weekDiv	
</select>

<!-- 보고서  상품별 납부 또는 환불 TOP5 조회 -->
<select id="getMonthlyPaymentTypeRank" resultType="HashMap" parameterType = "Report">
	SELECT
		prod.productname AS productName
		, sum(invoList.paymentamount) AS paymentAmount
	 FROM (
	  			<include refid="sqlInvoiceList"></include>
	  		) invoList
			, contract cont
			, contractproduct contP
			, product prod
	 WHERE invoList.connumber = cont.connumber
	 	AND invoList.providernumber = cont.providernumber
		AND cont.connumber = contP.connumber
		AND cont.providernumber = prod.providernumber
		AND contP.productid = prod.productid
		AND SUBSTR(invoList.paymentdatetime,1,6) = DATE_FORMAT(DATE(#{searchDate}), '%Y%m')
		<if test='providerNumber != null and !"0".equals(providerNumber )'>		 	
		AND invoList.providernumber = #{providerNumber }
		</if>	   
	   AND invoList.paymenttypecode = #{searchPaymentTypeCode}
	GROUP BY prod.productid
	ORDER BY 2 DESC
	LIMIT 5
</select>

<!-- 채널별 월별 결제금액 목록  -->
<sql id="sqlMonthlyChannelPaymentList">
	SELECT
			monList.listDate AS paymentDate
			, payList.channelid
			, payList.codename
			, IFNULL(payList.paymentamount, 0) AS paymentAmount
	  FROM (
			SELECT
					DATE_FORMAT(ADDDATE(CURDATE(),interval -rownum month),'%Y.%m') AS listDate
			  FROM(SELECT @rownum := @rownum +1 as rownum
			         FROM codegroup a , (select @rownum := -1) b
			        LIMIT 10) subMonList 
	  )monList LEFT OUTER JOIN (
		SELECT
			 DATE_FORMAT(invoList.paymentdatetime,'%Y.%m') AS paymentDate
			, cont.channelid
			, codeD.codename
			, SUM(invoList.paymentamount) AS paymentAmount
		  FROM (
		  			<include refid="sqlInvoiceList"></include>
		  		) invoList
				, contract cont
				, codegroupdetail codeD
		 WHERE invoList.connumber = cont.connumber
		 	AND invoList.providernumber = cont.providernumber
		 	AND cont.channelid = codeD.code
			AND codeD.codegroupid = 'CHANNEL'			
			AND DATE_FORMAT(invoList.paymentdatetime,'%Y%m') BETWEEN DATE_FORMAT(DATE_SUB(DATE(#{searchDate}), INTERVAL 10 month), '%Y%m') 
									 																AND DATE_FORMAT(DATE(#{searchDate}), '%Y%m') 
		<if test='providerNumber != null and !"0".equals(providerNumber )'>		 	
			AND invoList.providernumber = #{providerNumber }
		</if>									 																
		   AND invoList.paymenttypecode = #{searchPaymentTypeCode}
		GROUP BY SUBSTR(invoList.paymentdatetime,1, 6), cont.channelid
	  ) payList ON (monList.listDate = payList.paymentDate)
	  ORDER BY 1	
</sql>

<!-- 보고서  채널별 월별 채널목록 조회 -->
<select id="getMonthlyChannelPaymentChannelList" resultType="HashMap" parameterType = "Report">
	SELECT
		channelPaymentList.channelid AS channelId
		, channelPaymentList.codename AS channelName
	  FROM
	  	(
		<include refid="sqlMonthlyChannelPaymentList"></include>		
	  	) AS channelPaymentList
	 WHERE channelPaymentList.channelId IS NOT NULL
	GROUP BY 	channelPaymentList.codename, 	channelPaymentList.channelid	
</select>

<!-- 보고서  채널별 월별 월 조회 -->
<select id="getMonthlyChannelPaymentMonthList" resultType="HashMap" parameterType = "Report">
	SELECT
		DISTINCT (channelPaymentList.paymentDate) AS paymentDate
	  FROM
	  	(
			<include refid="sqlMonthlyChannelPaymentList"></include>
	  	) AS channelPaymentList
	  ORDER BY 1
</select>
<!-- 보고서  채널별 월별 매출  조회 -->
<select id="getMonthlyChannelPaymentList" resultType="HashMap" parameterType = "Report">
<!-- 	SELECT
			monList.listDate AS paymentDate
			, payList.channelid
			, payList.codename
			, IFNULL(payList.paymentamount, 0) AS paymentAmount
	  FROM (
			SELECT
					DATE_FORMAT(ADDDATE(CURDATE(),interval -rownum month),'%Y.%m') AS listDate
			  FROM(SELECT @rownum := @rownum +1 as rownum
			         FROM codegroup a , (select @rownum := -1) b
			        LIMIT 10) subMonList 
	  )monList LEFT OUTER JOIN ( -->
		<include refid="sqlMonthlyChannelPaymentList"></include>
<!-- 	  ) payList ON (monList.listDate = payList.paymentDate)
	  ORDER BY 1	 -->
</select>

<!-- 월 최고 매출 채널 -->
<sql id="sqlBestChannelPayment">
	SELECT
		cont.channelId
		, SUBSTR(invoList.paymentdatetime, 1,6) AS paymentDate
		, SUM(invoList.paymentamount) AS paymentAmount
	  FROM (
				<include refid="sqlInvoiceList"></include>
	  ) invoList
	  , contract cont
	  WHERE invoList.providernumber = cont.providernumber
	    AND invoList.connumber = cont.connumber
	    AND invoList.paymenttypecode = 'PAYMENT'    
	<if test='providerNumber != null and !"0".equals(providerNumber )'>		 	
		AND invoList.providernumber = #{providerNumber }
	</if>
	<if test="beforeYn == 'N'">	
	    AND SUBSTR(invoList.paymentdatetime,1,6) =  DATE_FORMAT(DATE(#{searchDate}), '%Y%m') 
	</if>		 	
	
	<if test="beforeYn == 'Y'">	
	    AND SUBSTR(invoList.paymentdatetime,1,6) =  DATE_FORMAT(DATE_SUB(DATE(#{searchDate}), INTERVAL 1 month), '%Y%m') 
	</if>		 	
	  GROUP BY cont.channelId, SUBSTR(invoList.paymentdatetime, 1,6)
	  ORDER BY 3 DESC
	  LIMIT 1		
</sql>

<sql id="sqlInvoiceList">
			SELECT
					invo.connumber	AS conNumber							/*계약번호*/
					, invo.invoicenumber AS invoiceNumber				/*청구번호*/
					, invo.invoicedate AS invoiceDate					/*결제요청일*/
					, invo.recurringpaymentyn								/*결제방법*/
					, invo.invoiceTurn AS invoiceTurn					/*회차*/
					, invo.collectionbalanceamount AS collectionBalanceAmount	/*결제금액*/
					, CASE WHEN payHist.paymenttypecode IS NOT NULL THEN payHist.paymenttypecode
							 WHEN payHist.paymenttypecode IS NULL AND invo.sendyn = 'Y' THEN 'PAYMENT'
							 ELSE NULL END AS paymenttypecode			/*결제유형코드*/
					,invo.paymentstatecode									/*결제상태코드*/
					, payHist.errorreasoncode AS errorReasonCode		/*에러코드*/
					, IFNULL(payHist.pgErrorCode,'') AS pgErrorCode	/*PG에러 코드*/
					, IFNULL(payHist.pgErrorMsg, '') AS pgErrorMsg	/*PG에러 메세지*/
					, CASE WHEN invo.sendyn = 'Y' THEN invo.totalinvoiceamount
							 ELSE IFNULL(payHist.paymentamount, 0) END AS paymentAmount	/*납부금액*/
					, CASE WHEN invo.sendyn = 'Y' THEN DATE_FORMAT(invo.senddate, '%Y%m%d%H%i%s')
							 ELSE IFNULL(payHist.paymentdatetime, '') END AS paymentDateTime	/*납부일시*/
					, invo.totalinvoiceamount AS totalInvoiceAmount	/*총청구금액*/	
					, invo.adjustamount AS adjustAmount					/*조정금액*/
					, invo.providernumber AS providerNumber			/*업체번호*/
					, invo.tid AS tid 										/*TID*/
					, invo.collectioncloseyn AS collectionCloseYn	/*미납종료여부*/
					, CASE WHEN invo.sendyn = 'Y' THEN 'batch'
							 ELSE IFNULL(payHist.auditid, '') END AS payProcId	/*결제처리자*/	
					, IFNULL(payHist.etc,'') AS etc						/*메모*/
					, invo.sendyn AS sendYn									/*전송여부*/
					, invo.senddate AS sendDate							/*전송일자*/
			  FROM invoice invo LEFT OUTER JOIN paymenthistory payHist													 
									ON ( invo.providernumber = payHist.providernumber
										AND invo.connumber = payHist.connumber
										AND invo.invoicenumber = payHist.invoicenumber
										AND payHist.paymentdatetime = (SELECT MAX(payHistSub.paymentdatetime) 
																					FROM paymenthistory payHistSub
																				  WHERE payHistSub.providernumber = payHist.providernumber
																				    AND payHistSub.connumber = payHist.connumber
																					 AND payHistSub.invoicenumber = payHist.invoicenumber	
																					 AND payHistSub.paymenttypecode not like '%ERROR'
																				)
			
										)
</sql>

<!-- 당월 최고 매출 채널 -->
<select id="getMonthBestChannel" resultType="HashMap" parameterType = "Report">
	SELECT
		codeD.codename AS bestChannelName
	  FROM (
	  		<bind name="beforeYn" value="'N'" />
			<include refid="sqlBestChannelPayment"></include>	  
	  )AS bestChannel
	  , codegroupdetail codeD
	 WHERE bestChannel.channelid = codeD.code
	   AND codeD.codegroupid = 'CHANNEL'			
	  
</select>
</mapper> 